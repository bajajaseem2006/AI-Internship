name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "ADMIN_API_KEY=test-admin-key" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV

    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Set up test environment
      run: |
        echo "DATABASE_URL=sqlite:///test.db" >> $GITHUB_ENV
        echo "ADMIN_API_KEY=test-admin-key" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV

    - name: Seed test database
      run: |
        cd backend
        python seed_db.py --create-tables --students data/small_students.json --internships data/small_internships.json

    - name: Train test model
      run: |
        cd backend
        python train_model.py --model_type similarity

    - name: Test API endpoints
      run: |
        cd backend
        python -c "
        import requests
        import time
        import subprocess
        import os
        import signal
        
        # Start Flask app in background
        proc = subprocess.Popen(['python', 'app.py'], 
                              stdout=subprocess.DEVNULL, 
                              stderr=subprocess.DEVNULL)
        
        # Wait for server to start
        time.sleep(5)
        
        try:
            # Test health endpoint
            response = requests.get('http://localhost:5000/api/health')
            assert response.status_code == 200
            print('✅ Health check passed')
            
            # Test student matches
            response = requests.get('http://localhost:5000/api/match/student/1?k=3')
            assert response.status_code == 200
            print('✅ Student matches endpoint passed')
            
            print('✅ All integration tests passed')
            
        finally:
            # Clean up
            proc.terminate()
            proc.wait()
        "

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      if: github.event_name == 'push'
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/pm-internship-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/pm-internship-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      if: github.event_name == 'push'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/pm-internship-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/pm-internship-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        # Test that docker-compose builds successfully
        docker-compose -f docker-compose.yml build
        echo "✅ Docker Compose build successful"

  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  lint-and-format:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python linting tools
      run: |
        pip install flake8 black isort

    - name: Run Python linting
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check Python formatting
      run: |
        cd backend
        black --check --diff .

    - name: Check Python imports
      run: |
        cd backend
        isort --check-only --diff .

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run ESLint
      run: |
        cd frontend
        npm run lint || true  # Don't fail on lint errors for now

  performance-test:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install locust

    - name: Generate larger test dataset
      run: |
        cd backend
        python data/generate_synthetic_data.py --students 100 --internships 20

    - name: Seed database with larger dataset
      run: |
        cd backend
        python seed_db.py --create-tables --students students_100.json --internships internships_20.json

    - name: Train model
      run: |
        cd backend
        python train_model.py --model_type similarity

    - name: Run basic performance test
      run: |
        cd backend
        python -c "
        import time
        import requests
        import subprocess
        
        # Start server
        proc = subprocess.Popen(['python', 'app.py'], 
                              stdout=subprocess.DEVNULL, 
                              stderr=subprocess.DEVNULL)
        time.sleep(5)
        
        try:
            # Time multiple requests
            times = []
            for i in range(10):
                start = time.time()
                response = requests.get('http://localhost:5000/api/match/student/1?k=5')
                end = time.time()
                times.append(end - start)
                assert response.status_code == 200
            
            avg_time = sum(times) / len(times)
            print(f'Average response time: {avg_time:.3f}s')
            
            if avg_time > 2.0:
                print('⚠️  Warning: Response time above 2s threshold')
            else:
                print('✅ Performance test passed')
                
        finally:
            proc.terminate()
            proc.wait()
        "